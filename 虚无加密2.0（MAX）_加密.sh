#!/bin/sh
#==========================================#
#
#            虚无独家公益加密               #
#                                          #
#  难度：⭐️⭐️⭐️                             #
#
#  标识：\(≧∇≦)/                           #
#
#  寄语：举头望明月，低头思故乡             #
#
#  频道：@xuwuljyyds                        #
#
#==========================================#

clear
export LC_ALL=C

xuwunb() {
    local content="$1"
    for i in $(seq 1 7); do
        content=$(printf "%s" "$content" | base64 -d)
    done
    echo "$content"
}

hex_content=$(xuwunb "")
decrypted_content=$(echo "$hex_content" | xxd -p -r | gunzip)
sh -c "$decrypted_content" "$0" "$@"
